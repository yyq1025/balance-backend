// Code generated by MockGen. DO NOT EDIT.
// Source: network.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entity "yyq1025/balance-backend/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockNetworkUseCase is a mock of NetworkUseCase interface.
type MockNetworkUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkUseCaseMockRecorder
}

// MockNetworkUseCaseMockRecorder is the mock recorder for MockNetworkUseCase.
type MockNetworkUseCaseMockRecorder struct {
	mock *MockNetworkUseCase
}

// NewMockNetworkUseCase creates a new mock instance.
func NewMockNetworkUseCase(ctrl *gomock.Controller) *MockNetworkUseCase {
	mock := &MockNetworkUseCase{ctrl: ctrl}
	mock.recorder = &MockNetworkUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkUseCase) EXPECT() *MockNetworkUseCaseMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockNetworkUseCase) GetAll(ctx context.Context) ([]entity.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]entity.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNetworkUseCaseMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNetworkUseCase)(nil).GetAll), ctx)
}

// MockNetworkRepository is a mock of NetworkRepository interface.
type MockNetworkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkRepositoryMockRecorder
}

// MockNetworkRepositoryMockRecorder is the mock recorder for MockNetworkRepository.
type MockNetworkRepositoryMockRecorder struct {
	mock *MockNetworkRepository
}

// NewMockNetworkRepository creates a new mock instance.
func NewMockNetworkRepository(ctrl *gomock.Controller) *MockNetworkRepository {
	mock := &MockNetworkRepository{ctrl: ctrl}
	mock.recorder = &MockNetworkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkRepository) EXPECT() *MockNetworkRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockNetworkRepository) GetAll(ctx context.Context, networks *[]entity.Network) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, networks)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetAll indicates an expected call of GetAll.
func (mr *MockNetworkRepositoryMockRecorder) GetAll(ctx, networks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockNetworkRepository)(nil).GetAll), ctx, networks)
}
