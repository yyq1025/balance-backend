// Code generated by MockGen. DO NOT EDIT.
// Source: wallet.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entity "github.com/yyq1025/balance-backend/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletUseCase is a mock of WalletUseCase interface.
type MockWalletUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockWalletUseCaseMockRecorder
}

// MockWalletUseCaseMockRecorder is the mock recorder for MockWalletUseCase.
type MockWalletUseCaseMockRecorder struct {
	mock *MockWalletUseCase
}

// NewMockWalletUseCase creates a new mock instance.
func NewMockWalletUseCase(ctrl *gomock.Controller) *MockWalletUseCase {
	mock := &MockWalletUseCase{ctrl: ctrl}
	mock.recorder = &MockWalletUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletUseCase) EXPECT() *MockWalletUseCaseMockRecorder {
	return m.recorder
}

// AddOne mocks base method.
func (m *MockWalletUseCase) AddOne(ctx context.Context, wallet *entity.Wallet) (entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOne", ctx, wallet)
	ret0, _ := ret[0].(entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOne indicates an expected call of AddOne.
func (mr *MockWalletUseCaseMockRecorder) AddOne(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOne", reflect.TypeOf((*MockWalletUseCase)(nil).AddOne), ctx, wallet)
}

// DeleteOne mocks base method.
func (m *MockWalletUseCase) DeleteOne(ctx context.Context, condition entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockWalletUseCaseMockRecorder) DeleteOne(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockWalletUseCase)(nil).DeleteOne), ctx, condition)
}

// GetManyWithPagination mocks base method.
func (m *MockWalletUseCase) GetManyWithPagination(ctx context.Context, condition entity.Wallet, pagination *entity.Pagination) ([]entity.Balance, *entity.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyWithPagination", ctx, condition, pagination)
	ret0, _ := ret[0].([]entity.Balance)
	ret1, _ := ret[1].(*entity.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManyWithPagination indicates an expected call of GetManyWithPagination.
func (mr *MockWalletUseCaseMockRecorder) GetManyWithPagination(ctx, condition, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyWithPagination", reflect.TypeOf((*MockWalletUseCase)(nil).GetManyWithPagination), ctx, condition, pagination)
}

// GetOne mocks base method.
func (m *MockWalletUseCase) GetOne(ctx context.Context, condition entity.Wallet) (entity.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, condition)
	ret0, _ := ret[0].(entity.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockWalletUseCaseMockRecorder) GetOne(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockWalletUseCase)(nil).GetOne), ctx, condition)
}

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// AddOne mocks base method.
func (m *MockWalletRepository) AddOne(ctx context.Context, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOne", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOne indicates an expected call of AddOne.
func (mr *MockWalletRepositoryMockRecorder) AddOne(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOne", reflect.TypeOf((*MockWalletRepository)(nil).AddOne), ctx, wallet)
}

// DeleteOne mocks base method.
func (m *MockWalletRepository) DeleteOne(ctx context.Context, condition entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockWalletRepositoryMockRecorder) DeleteOne(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockWalletRepository)(nil).DeleteOne), ctx, condition)
}

// GetManyWithPagination mocks base method.
func (m *MockWalletRepository) GetManyWithPagination(ctx context.Context, condition entity.Wallet, wallets *[]entity.Wallet, pagination *entity.Pagination) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManyWithPagination", ctx, condition, wallets, pagination)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetManyWithPagination indicates an expected call of GetManyWithPagination.
func (mr *MockWalletRepositoryMockRecorder) GetManyWithPagination(ctx, condition, wallets, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManyWithPagination", reflect.TypeOf((*MockWalletRepository)(nil).GetManyWithPagination), ctx, condition, wallets, pagination)
}

// GetOne mocks base method.
func (m *MockWalletRepository) GetOne(ctx context.Context, condition entity.Wallet, wallet *entity.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, condition, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOne indicates an expected call of GetOne.
func (mr *MockWalletRepositoryMockRecorder) GetOne(ctx, condition, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockWalletRepository)(nil).GetOne), ctx, condition, wallet)
}

// MockWalletEthAPI is a mock of WalletEthAPI interface.
type MockWalletEthAPI struct {
	ctrl     *gomock.Controller
	recorder *MockWalletEthAPIMockRecorder
}

// MockWalletEthAPIMockRecorder is the mock recorder for MockWalletEthAPI.
type MockWalletEthAPIMockRecorder struct {
	mock *MockWalletEthAPI
}

// NewMockWalletEthAPI creates a new mock instance.
func NewMockWalletEthAPI(ctrl *gomock.Controller) *MockWalletEthAPI {
	mock := &MockWalletEthAPI{ctrl: ctrl}
	mock.recorder = &MockWalletEthAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletEthAPI) EXPECT() *MockWalletEthAPIMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockWalletEthAPI) GetBalance(ctx context.Context, condition entity.Wallet) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, condition)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockWalletEthAPIMockRecorder) GetBalance(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockWalletEthAPI)(nil).GetBalance), ctx, condition)
}

// GetSymbol mocks base method.
func (m *MockWalletEthAPI) GetSymbol(ctx context.Context, condition entity.Wallet) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbol", ctx, condition)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbol indicates an expected call of GetSymbol.
func (mr *MockWalletEthAPIMockRecorder) GetSymbol(ctx, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbol", reflect.TypeOf((*MockWalletEthAPI)(nil).GetSymbol), ctx, condition)
}
